{"ast":null,"code":"var _jsxFileName = \"/Users/jonathanpoon/dev/dev-portfolio/src/components/projects/ProjectCard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { Button, Card, Badge, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { ThemeContext } from 'styled-components';\nimport ReactMarkdown from 'react-markdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  badgeStyle: {\n    paddingLeft: 10,\n    paddingRight: 10,\n    paddingTop: 5,\n    paddingBottom: 5,\n    margin: 5\n  },\n  cardStyle: {\n    borderRadius: 10\n  },\n  cardTitleStyle: {\n    fontSize: 24,\n    fontWeight: 700\n  },\n  cardTextStyle: {\n    textAlign: 'left'\n  },\n  linkStyle: {\n    textDecoration: 'none',\n    padding: 10\n  },\n  buttonStyle: {\n    margin: 5\n  }\n};\n\nconst ProjectCard = props => {\n  _s();\n\n  var _project$links;\n\n  const theme = useContext(ThemeContext);\n\n  const parseBodyText = text => /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 35\n  }, this);\n\n  const {\n    project\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Col, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      style: { ...styles.cardStyle,\n        backgroundColor: theme.cardBackground,\n        borderColor: theme.cardBorderColor\n      },\n      text: theme.bsSecondaryVariant,\n      children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n        variant: \"top\",\n        src: project === null || project === void 0 ? void 0 : project.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n          style: styles.cardTitleStyle,\n          children: project.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          style: styles.cardTextStyle,\n          children: parseBodyText(project.bodyText)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: project === null || project === void 0 ? void 0 : (_project$links = project.links) === null || _project$links === void 0 ? void 0 : _project$links.map(link => /*#__PURE__*/_jsxDEV(Button, {\n          style: styles.buttonStyle,\n          variant: 'outline-' + theme.bsSecondaryVariant,\n          onClick: () => window.open(link.href, '_blank'),\n          children: link.text\n        }, link.href, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), project.tags && /*#__PURE__*/_jsxDEV(Card.Footer, {\n        style: {\n          backgroundColor: theme.cardFooterBackground\n        },\n        children: project.tags.map(tag => /*#__PURE__*/_jsxDEV(Badge, {\n          pill: true,\n          bg: theme.bsSecondaryVariant,\n          text: theme.bsPrimaryVariant,\n          style: styles.badgeStyle,\n          children: tag\n        }, tag, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProjectCard, \"+C1P7ukOg/azcV4AZ819oyezFOE=\");\n\n_c = ProjectCard;\nProjectCard.propTypes = {\n  project: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    bodyText: PropTypes.string.isRequired,\n    image: PropTypes.string,\n    links: PropTypes.arrayOf(PropTypes.object),\n    tags: PropTypes.arrayOf(PropTypes.string)\n  }).isRequired\n};\nexport default ProjectCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectCard\");","map":{"version":3,"sources":["/Users/jonathanpoon/dev/dev-portfolio/src/components/projects/ProjectCard.jsx"],"names":["React","useContext","Button","Card","Badge","Col","PropTypes","ThemeContext","ReactMarkdown","styles","badgeStyle","paddingLeft","paddingRight","paddingTop","paddingBottom","margin","cardStyle","borderRadius","cardTitleStyle","fontSize","fontWeight","cardTextStyle","textAlign","linkStyle","textDecoration","padding","buttonStyle","ProjectCard","props","theme","parseBodyText","text","project","backgroundColor","cardBackground","borderColor","cardBorderColor","bsSecondaryVariant","image","title","bodyText","links","map","link","window","open","href","tags","cardFooterBackground","tag","bsPrimaryVariant","propTypes","shape","string","isRequired","arrayOf","object"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SACEC,MADF,EACUC,IADV,EACgBC,KADhB,EACuBC,GADvB,QAEO,iBAFP;AAGA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAOC,aAAP,MAA0B,gBAA1B;;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,UAAU,EAAE;AACVC,IAAAA,WAAW,EAAE,EADH;AAEVC,IAAAA,YAAY,EAAE,EAFJ;AAGVC,IAAAA,UAAU,EAAE,CAHF;AAIVC,IAAAA,aAAa,EAAE,CAJL;AAKVC,IAAAA,MAAM,EAAE;AALE,GADC;AAQbC,EAAAA,SAAS,EAAE;AACTC,IAAAA,YAAY,EAAE;AADL,GARE;AAWbC,EAAAA,cAAc,EAAE;AACdC,IAAAA,QAAQ,EAAE,EADI;AAEdC,IAAAA,UAAU,EAAE;AAFE,GAXH;AAebC,EAAAA,aAAa,EAAE;AACbC,IAAAA,SAAS,EAAE;AADE,GAfF;AAkBbC,EAAAA,SAAS,EAAE;AACTC,IAAAA,cAAc,EAAE,MADP;AAETC,IAAAA,OAAO,EAAE;AAFA,GAlBE;AAsBbC,EAAAA,WAAW,EAAE;AACXX,IAAAA,MAAM,EAAE;AADG;AAtBA,CAAf;;AA2BA,MAAMY,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAAA;;AAC7B,QAAMC,KAAK,GAAG5B,UAAU,CAACM,YAAD,CAAxB;;AACA,QAAMuB,aAAa,GAAIC,IAAD,iBAAU,QAAC,aAAD;AAAe,IAAA,QAAQ,EAAEA;AAAzB;AAAA;AAAA;AAAA;AAAA,UAAhC;;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAcJ,KAApB;AAEA,sBACE,QAAC,GAAD;AAAA,2BACE,QAAC,IAAD;AACE,MAAA,KAAK,EAAE,EACL,GAAGnB,MAAM,CAACO,SADL;AAELiB,QAAAA,eAAe,EAAEJ,KAAK,CAACK,cAFlB;AAGLC,QAAAA,WAAW,EAAEN,KAAK,CAACO;AAHd,OADT;AAME,MAAA,IAAI,EAAEP,KAAK,CAACQ,kBANd;AAAA,8BAQE,QAAC,IAAD,CAAM,GAAN;AAAU,QAAA,OAAO,EAAC,KAAlB;AAAwB,QAAA,GAAG,EAAEL,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEM;AAAtC;AAAA;AAAA;AAAA;AAAA,cARF,eASE,QAAC,IAAD,CAAM,IAAN;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,KAAK,EAAE7B,MAAM,CAACS,cAA1B;AAAA,oBAA2Cc,OAAO,CAACO;AAAnD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD,CAAM,IAAN;AAAW,UAAA,KAAK,EAAE9B,MAAM,CAACY,aAAzB;AAAA,oBACGS,aAAa,CAACE,OAAO,CAACQ,QAAT;AADhB;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eAgBE,QAAC,IAAD,CAAM,IAAN;AAAA,kBACGR,OADH,aACGA,OADH,yCACGA,OAAO,CAAES,KADZ,mDACG,eAAgBC,GAAhB,CAAqBC,IAAD,iBACnB,QAAC,MAAD;AAEE,UAAA,KAAK,EAAElC,MAAM,CAACiB,WAFhB;AAGE,UAAA,OAAO,EAAE,aAAaG,KAAK,CAACQ,kBAH9B;AAIE,UAAA,OAAO,EAAE,MAAMO,MAAM,CAACC,IAAP,CAAYF,IAAI,CAACG,IAAjB,EAAuB,QAAvB,CAJjB;AAAA,oBAMGH,IAAI,CAACZ;AANR,WACOY,IAAI,CAACG,IADZ;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAhBF,EA4BGd,OAAO,CAACe,IAAR,iBACC,QAAC,IAAD,CAAM,MAAN;AAAa,QAAA,KAAK,EAAE;AAAEd,UAAAA,eAAe,EAAEJ,KAAK,CAACmB;AAAzB,SAApB;AAAA,kBACGhB,OAAO,CAACe,IAAR,CAAaL,GAAb,CAAkBO,GAAD,iBAChB,QAAC,KAAD;AAEE,UAAA,IAAI,MAFN;AAGE,UAAA,EAAE,EAAEpB,KAAK,CAACQ,kBAHZ;AAIE,UAAA,IAAI,EAAER,KAAK,CAACqB,gBAJd;AAKE,UAAA,KAAK,EAAEzC,MAAM,CAACC,UALhB;AAAA,oBAOGuC;AAPH,WACOA,GADP;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cA7BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgDD,CAtDD;;GAAMtB,W;;KAAAA,W;AAwDNA,WAAW,CAACwB,SAAZ,GAAwB;AACtBnB,EAAAA,OAAO,EAAE1B,SAAS,CAAC8C,KAAV,CAAgB;AACvBb,IAAAA,KAAK,EAAEjC,SAAS,CAAC+C,MAAV,CAAiBC,UADD;AAEvBd,IAAAA,QAAQ,EAAElC,SAAS,CAAC+C,MAAV,CAAiBC,UAFJ;AAGvBhB,IAAAA,KAAK,EAAEhC,SAAS,CAAC+C,MAHM;AAIvBZ,IAAAA,KAAK,EAAEnC,SAAS,CAACiD,OAAV,CAAkBjD,SAAS,CAACkD,MAA5B,CAJgB;AAKvBT,IAAAA,IAAI,EAAEzC,SAAS,CAACiD,OAAV,CAAkBjD,SAAS,CAAC+C,MAA5B;AALiB,GAAhB,EAMNC;AAPmB,CAAxB;AAUA,eAAe3B,WAAf","sourcesContent":["import React, { useContext } from 'react';\nimport {\n  Button, Card, Badge, Col,\n} from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { ThemeContext } from 'styled-components';\nimport ReactMarkdown from 'react-markdown';\n\nconst styles = {\n  badgeStyle: {\n    paddingLeft: 10,\n    paddingRight: 10,\n    paddingTop: 5,\n    paddingBottom: 5,\n    margin: 5,\n  },\n  cardStyle: {\n    borderRadius: 10,\n  },\n  cardTitleStyle: {\n    fontSize: 24,\n    fontWeight: 700,\n  },\n  cardTextStyle: {\n    textAlign: 'left',\n  },\n  linkStyle: {\n    textDecoration: 'none',\n    padding: 10,\n  },\n  buttonStyle: {\n    margin: 5,\n  },\n};\n\nconst ProjectCard = (props) => {\n  const theme = useContext(ThemeContext);\n  const parseBodyText = (text) => <ReactMarkdown children={text} />;\n\n  const { project } = props;\n\n  return (\n    <Col>\n      <Card\n        style={{\n          ...styles.cardStyle,\n          backgroundColor: theme.cardBackground,\n          borderColor: theme.cardBorderColor,\n        }}\n        text={theme.bsSecondaryVariant}\n      >\n        <Card.Img variant=\"top\" src={project?.image} />\n        <Card.Body>\n          <Card.Title style={styles.cardTitleStyle}>{project.title}</Card.Title>\n          <Card.Text style={styles.cardTextStyle}>\n            {parseBodyText(project.bodyText)}\n          </Card.Text>\n        </Card.Body>\n\n        <Card.Body>\n          {project?.links?.map((link) => (\n            <Button\n              key={link.href}\n              style={styles.buttonStyle}\n              variant={'outline-' + theme.bsSecondaryVariant}\n              onClick={() => window.open(link.href, '_blank')}\n            >\n              {link.text}\n            </Button>\n          ))}\n        </Card.Body>\n        {project.tags && (\n          <Card.Footer style={{ backgroundColor: theme.cardFooterBackground }}>\n            {project.tags.map((tag) => (\n              <Badge\n                key={tag}\n                pill\n                bg={theme.bsSecondaryVariant}\n                text={theme.bsPrimaryVariant}\n                style={styles.badgeStyle}\n              >\n                {tag}\n              </Badge>\n            ))}\n          </Card.Footer>\n        )}\n      </Card>\n    </Col>\n  );\n};\n\nProjectCard.propTypes = {\n  project: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    bodyText: PropTypes.string.isRequired,\n    image: PropTypes.string,\n    links: PropTypes.arrayOf(PropTypes.object),\n    tags: PropTypes.arrayOf(PropTypes.string),\n  }).isRequired,\n};\n\nexport default ProjectCard;\n"]},"metadata":{},"sourceType":"module"}